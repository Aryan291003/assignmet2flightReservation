@page "/flights"

@using MauiApp9.Data;
@using System.Text;


<style>
    * {
        box-sizing: border-box;
    }

    /* Create two equal columns that floats next to each other */
    .column {
        float: left;
        width: 50%;
        padding: 10px;
        height: 350px;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .ColumnB {
        content: "";
        display: table;
        clear: both;
    }

    .myself .property {
        width: 25%;
        display: inline-block;
        box-sizing: border-box;
        text-align: right;
    }

    .myself .value {
        text-align: left;
        padding-left: 10px;
        width: 70%;
        display: inline-block;
        box-sizing: border-box;
    }


    .container {
        position: relative;
    }

    .center {
        position: absolute;
        left: 50%;
    }

    .columnC {
        float: left;
        width: 100%;
        padding: 10px;
        height: 150px;
        box-sizing: border-box;
    }

    .columnB {
        clear: both;
        width: 100%;
        padding: 10px;
        height: 150px;
        margin-top: 450px;
    }

    .columnD {
        clear: both;
        width: 100%;
        padding-top: 130px;
        height: 350px;
       
    }

    .myself .valueC {
        text-align: left;
        padding-left: 10px;
        width: 70%;
        display: inline-block;
        box-sizing: border-box;
    }

    .myself .propertyC {
        width: 25%;
        display: inline-block;
        box-sizing: border-box;
        text-align: right;
    }

    .form-control {
        width: 100%;
    }

    .button1 {
        width: 300px;
    }

</style>

<div class="row">
    <div class="columnC myself">
        <div class="row">
            <div class="center">
                <h3>Flight Finder</h3>
            </div>
        </div>

        <br /><br />

        <div class="row">
            <div class="col-sm-3">
                <label for="explicit-label-name">From: </label>
                <select class="form-control" @bind="fromValue">
                    <option value="@FlightManager.WEEKDAY_ANY">@FlightManager.WEEKDAY_ANY</option>
                    @if (airports == null)
                    {
                        <option>Loading...</option>
                    }
                    else
                    {
                        @foreach (var a in airports)
                        {
                            <option value=@a>@a</option>
                        }
                    }
                </select>
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name">To: </label>
                <select class="form-control" @bind="toValue">
                    <option value="Any">@FlightManager.WEEKDAY_ANY</option>
                    @if (airports == null)
                    {
                        <option>Loading...</option>
                    }
                    else
                    {
                        @foreach (var a in airports)
                        {
                            <option value=@a>@a</option>
                        }
                    }
                </select>
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name">Day: </label>
                <select class="form-control" @bind="dayValue">
                    <option value="@FlightManager.WEEKDAY_ANY">@FlightManager.WEEKDAY_ANY</option>
                    <option value="@FlightManager.WEEKDAY_SUNDAY">@FlightManager.WEEKDAY_SUNDAY</option>
                    <option value="@FlightManager.WEEKDAY_MONDAY">@FlightManager.WEEKDAY_MONDAY</option>
                    <option value="@FlightManager.WEEKDAY_TUESDAY">@FlightManager.WEEKDAY_TUESDAY</option>
                    <option value="@FlightManager.WEEKDAY_WEDNESDAY">@FlightManager.WEEKDAY_WEDNESDAY</option>
                    <option value="@FlightManager.WEEKDAY_THURSDAY">@FlightManager.WEEKDAY_THURSDAY</option>
                    <option value="@FlightManager.WEEKDAY_FRIDAY">@FlightManager.WEEKDAY_FRIDAY</option>
                    <option value="@FlightManager.WEEKDAY_SATURDAY">@FlightManager.WEEKDAY_SATURDAY</option>
                </select>
            </div>
            <div class="col-sm-3">
                <label for="explicit-label-name"> </label>
                <button class="btn btn-primary form-control" @onclick="@FindFlights">Find flights</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="columnC myself">
        <div class="row ">
            <div class="center">
                <h3>Flights</h3>
            </div>
        </div>

        <br /><br />
        <select class="form-control" @onchange="@fillForm">
            @if (flights == null)
            {
                <option>Loading...</option>
            }
            else
            {
                <option>Select a flight from this list</option>
                @foreach (var f in flights)
                {
                    <option value=@f.Code>@f.Code , @f.Airline, @f.Airline, @f.From, @f.To, @f.Weekday, @f.Time, @f.CostPerSeat</option>
                }
            }

        </select>
    </div>
</div>
<div class="row">
    <div class="columnC myself">
        <div class="row">
            <div class="center">
                <h3>Reserve</h3>
            </div>
        </div>

        <br />
        <label>Flight code:</label> <input class="form-control" type="text" placeholder="Flight" value="@newFlightCode">
        <label>Airline:</label><input class="form-control" type="text" placeholder="Airline" value="@newairline">
        <label>Day:</label> <input class="form-control" type="text" placeholder="Day" value="@newweekday">
        <label>Time:</label> <input class="form-control" type="text" placeholder="Time" value="@newtime">
        <label>Cost:</label> <input class="form-control" type="text" placeholder="Cost" value="@newcostPerSeat">
        <label>Name:</label> <input class="form-control" type="text" placeholder="Name" @bind="newName">
        <label>Citizenship:</label><input class="form-control" type="text" placeholder="Citizenship" @bind="newCitizenship">
        <br />


        <div class="row">
            <div class="center">
                <button class="btn btn-primary button1" @onclick="CallGenerateReservationCode">Reserve</button>
 
                <br /> <br />
                <p id="c" role="status" value="@newReservationCode">Reservation Code: @newReservationCode</p>

            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="columnB ">
        <div class="container">
            <div class="center">
                <h3>Search</h3>
            </div>
        </div>
        <br />
        <label>Code: </label><input class="form-control" type="text" id="code" name="code" />
        <label>Airline: </label><input class="form-control" type="text" id="airline" name="airline" />
        <label>Name: </label><input class="form-control" type="text" id="name" name="name" />
        <br />

        <div class="row">
            <div class="center">
                <button class="btn btn-primary" @onclick="ValidateFindFlightsInput">Find reservations</button>
            </div>
        </div>

    </div>
</div>
<div class="col-12 text-center mt-3 columnD">
    <h4>Reservations</h4>
    <select class="form-select" aria-label="Default select example" @onchange="selectReserveFlights" onfocus="this.selectedIndex = -1;">
        <option value=" " selected>Please select a reservation</option>
        @foreach (var res in resNew)
        {
            <option value="@res.Code"> @res.Code,@res.FlightCode,@res.Airline,@res.Cost,@res.Name,@res.Citizenship,@res.Active </option>
        }

    </select>
</div>










@code {

    private void IncrementCount()
    {
        currentCount++;
    }


    //string flightCode;
    static string newFlightCode;
    string newairline;

    string newfrom;

    string newto;

    string newweekday;

    string newtime;

    int newseats;

    double newcostPerSeat;

    string newName;
    string newCitizenship;
    string reservationCode;
    //[Parameter]
    //public string FlightCode { get; set; }




    FlightManager fm = new FlightManager();
    List<Flight> flights;// = FlightManager.flights;
    List<string> airports = FlightManager.airports;

    //private List<Flight> flightSelected = new();

    private int currentCount = 0;

    Flight flight;
    string a;
    string fromValue;
    string toValue;
    string dayValue;
    private void FindFlights()
    {
        newFlightCode = "";
        newairline = "";

        newfrom = "";

        newto = "";

        newweekday = "";

        newtime = "";

        newseats = 0;

        newcostPerSeat = 0;
        newName = "";
        newCitizenship = "";
        //fm = new FlightManager();
        //flights = FlightManager.flights;
        if (fromValue == null)
        {
            fromValue = FlightManager.WEEKDAY_ANY;
        }
        if (toValue == null)
        {
            toValue = FlightManager.WEEKDAY_ANY;
        }
        if (dayValue == null)
        {
            dayValue = FlightManager.WEEKDAY_ANY;
        }
        flights = FlightManager.findFlights(fromValue, toValue, dayValue);

    }

    private void fillForm(ChangeEventArgs e)
    {

        newFlightCode = e.Value.ToString();
        flight = FlightManager.findFlightByCode(newFlightCode);
        newairline = flight.Airline;

        newfrom = flight.From;

        newto = flight.To;

        newweekday = flight.Weekday;

        newtime = flight.Time;

        newseats = flight.Seats;

        newcostPerSeat = flight.CostPerSeat;
       
    }
    string newReservationCode;
    ReservationManager rm1 = new ReservationManager();
    private void CallGenerateReservationCode()
    {
        string msg = newReservationCode;
        //newReservationCode = ReservationManager.GenerateReservationCode(flight);
        newReservationCode = rm1.GenerateResCode();
        MakeReservation();

    }

    /******************************* ADDED CODE*******************************************/

    string resDay = "";
    string inputResCode = "";
    string inputCode = "";
    string inputName = "";
    string inputResStatus = "";
    string inputCitizenship = "";
    string reservationResult = "";
    double inputCost = 0;
    string inputAirline = "";
    string inputResCode2 = "";
    string inputAirline2 = "";
    string inputName2 = "";
    string errorMessage = "";
    string selectedFlightCode;
    double selectedCost;
    string selectedAirline;

    FlightManager fl = new FlightManager();
    ReservationManager rm = new ReservationManager();
    List<Reservation> reservations = ReservationManager.GetReservations();
    List<Reservation> resNew = new List<Reservation>();
    List<Reservation> reservationList = ReservationManager.GetReservations();



    /*This is the method called after the "Find Flights" button is clicked.
     * It will find reserved flights from reservation.csv file according to
     * user inputs of reservation code and/or airline and/or name.
    */
    private void ValidateFindFlightsInput()
    {
        resNew.Clear();
        Reservation NewReservation;

        if ((inputResCode2 != "") || (inputAirline2 != "") || (inputName2 != ""))
        {
            foreach (var res in reservations)
            {
                if (((inputResCode2 != "") && (inputResCode2.ToUpper() == res.Code.ToUpper())) &&
                    ((inputAirline2 != "") && (inputAirline2.ToUpper() == res.Airline.ToUpper())) &&
                    ((inputName2 != "") && (inputName2.ToUpper() == res.Name.ToUpper())))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if (((inputResCode2 != "") && (inputResCode2.ToUpper() == res.Code.ToUpper())) &&
                       ((inputAirline2 != "") && (inputAirline2.ToUpper() == res.Airline.ToUpper())) &&
                       (inputName2 == ""))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if (((inputResCode2 != "") && (inputResCode2.ToUpper() == res.Code.ToUpper())) &&
                    (inputAirline2 == "") &&
                    ((inputName2 != "") && (inputName2.ToUpper() == res.Name.ToUpper())))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if ((inputResCode2 == "") &&
                    ((inputAirline2 != "") && (inputAirline2.ToUpper() == res.Airline.ToUpper())) &&
                    ((inputName2 != "") && (inputName2.ToUpper() == res.Name.ToUpper())))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if (((inputResCode2 != "") && (inputResCode2.ToUpper() == res.Code.ToUpper())) &&
                       (inputAirline2 == "") &&
                       (inputName2 == ""))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);

                }
                else if ((inputResCode2 == "") &&
                    (inputAirline2 == "") &&
                    ((inputName2 != "") && (inputName2.ToUpper() == res.Name.ToUpper())))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
                else if ((inputResCode2 == "") &&
                    ((inputAirline2 != "") && (inputAirline2.ToUpper() == res.Airline.ToUpper())) &&
                    (inputName2 == ""))
                {
                    NewReservation = new Reservation(res.Code, res.FlightCode, res.Airline, res.Cost, res.Name, res.Citizenship, res.Active);
                    resNew.Add(NewReservation);
                }
            }
        }
        else
        {
            resNew = reservations;

        }
    }

    //This function creates the reservation and adds it in the csv file.
    private void MakeReservation()
    {
        try
        {
            //flightValidation();
            // NameValidation();
            //CitizenshipValidation();

            foreach (var f in flights)
            {
                if (f.Code == newFlightCode)
                {
                    //SeatsValidation(f.FlightQuantity);

                    ClearErrorMessage();

                    //reservationCode = rm.GenerateResCode();
                    double cost = selectedCost;
                    var reservation = new Reservation(newReservationCode, newFlightCode, newairline, newcostPerSeat, newName, newCitizenship, "Active");

                    reservationList.Add(reservation);
                    rm.UpdateReservationFile(reservationList);

                    //f.FlightQuantity--;

                    //fl.UpdateFlightsFile(flights);
                    
                    break;
                }
            }

        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
        // catch (NoMoreSeatsExceptions e)
        // {
        //     errorMessage = e.Message;
        // }
        // catch (InvalidCitizenshipException e)
        // {
        //     errorMessage = e.Message;

        // }
        // catch (InvalidNameException e)
        // {
        //     errorMessage = e.Message;
        // }
        // catch (InvalidFlightCodeException e)
        // {
        //     errorMessage = e.Message;
        // }
    }
    //This populates the text the text box with its designated value after the options is clicked.
    public void selectReserveFlights(ChangeEventArgs e)
    {
        string resCode = e.Value.ToString();

        if (resCode == "")
        {
            inputResCode = "";
            inputCode = "";
            inputAirline = "";
            inputCost = 0;
            inputName = ""; ;
            inputCitizenship = "";
            inputResStatus = "";
        }
        else
        {

            foreach (var r in reservations)
            {
                if (r.Code == resCode)
                {
                    inputResCode = r.Code;
                    inputCode = r.FlightCode;
                    inputAirline = r.Airline;
                    inputCost = r.Cost;
                    inputName = r.Name;
                    inputCitizenship = r.Citizenship;
                    inputResStatus = r.Active;
                }
            }
        }
    }

    //This is the method called after the "save" button is clicked
    private void saveReservation()
    {
        reservationResult = "";

        try
        {
            //flightValidation();
            //NameValidation();
            //CitizenshipValidation();

            foreach (var item in reservations)
            {
                if (item.Code == inputResCode)
                {
                    if (item.Active != inputResStatus)
                    {
                        foreach (var f in flights)
                        {
                            // if (f.FlightCode == inputCode)
                            // {
                            //     if (inputResStatus == "Active")
                            //     {
                            //         SeatsValidation(f.FlightQuantity);
                            //         f.FlightQuantity--;
                            //     }
                            //     else
                            //     {
                            //         f.FlightQuantity++;
                            //     }
                            //     break;
                            // }
                        }
                    }

                    ClearErrorMessage();

                    item.Name = inputName;
                    item.Citizenship = inputCitizenship;
                    item.Active = inputResStatus;
                    rm.UpdateReservationFile(reservations);
                    //fl.UpdateReservationFile(flights);
                    reservationResult = "Reservation details updated.";
                    break;
                }
            }
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
        // catch (NoMoreSeatsExceptions e)
        // {
        //         errorMessage = e.Message;
        //     }
        // catch (InvalidCitizenshipException e)
        // {
        //         errorMessage = e.Message;

        //     }
        // catch (InvalidNameException e)
        // {
        //         errorMessage = e.Message;
        //     }
        // catch (InvalidFlightCodeException e)
        // {
        //         errorMessage = e.Message;

        //     }

    }

    //Clears the error message on the alert box
    private void ClearErrorMessage()
    {
        errorMessage = "";
    }
    //List<Flight> flights = FlightManager.flights;

    //private Flight[] flightsArr;

    //protected override async Task OnInitializedAsync() => flightsArr = await FlightsService.GetFlights();

}
